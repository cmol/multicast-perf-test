#!/usr/bin/env ruby

require "bundler/setup"
require "mcast_perf_test"
require 'slop'

options = {}

if ARGV[0] == "sender"
  ARGV.shift
  opts = Slop::Options.new
  opts.banner = "usage: #{__FILE__} sender [options] ..."
  opts.string "-e", "--ethernet", "ethernet interface", required: true
  opts.string "-w", "--wifi", "ethernet interface", required: true
  opts.int "-b", "--bitrate", "bitrate in kb/s (default 200)", default: 200
  opts.int "-p", "--packet-length", "packet length in bytes (default 100)",
    default: 100
  opts.array "-c", "--clients",
    "list of client as fd00::1,... Only used for unicast mode (default nil)",
    default: nil
  opts.int "-t", "--time", "sending test time (default: 60)", default: 60
  opts.bool "-v", "--verbose", "enable verbose mode", default: false
  opts.on "-h", "--help" do
    puts opts
    exit
  end

  begin
    parser = Slop::Parser.new(opts)
    options = parser.parse(ARGV).to_hash
  rescue Slop::MissingRequiredOption
    puts opts
    exit
  end

  options[:bitrate] *= 1024
  send = McastPerfTest::Sender.new(options)
  send.run

elsif ARGV[0] == "receiver"
  ARGV.shift
  opts = Slop::Options.new
  opts.banner = "usage: #{__FILE__} receiver [options] ..."
  opts.string "-e", "--ethernet", "ethernet interface", required: true
  opts.string "-w", "--wifi", "ethernet interface", required: true
  opts.int "-s", "--samples", "number of samples (default 2M)", default: 2000000
  opts.array "--files", "a list of files to import"
  opts.bool "-l", "--loop", "enable loop mode", default: false
  opts.bool "-v", "--verbose", "enable verbose mode", default: false
  opts.on "-h", "--help" do
    puts opts
    exit
  end

  begin
    parser = Slop::Parser.new(opts)
    options = parser.parse(ARGV).to_hash
  rescue Slop::MissingRequiredOption
    puts opts
    exit
  end

  if options[:loop]
    loop do
      recv = McastPerfTest::Receiver.new(options)
      recv.run
    end
  else
    recv = McastPerfTest::Receiver.new(options)
    recv.run
  end

elsif ARGV[0] == "collector"
  ARGV.shift
  opts = Slop::Options.new
  opts.banner = "usage: #{__FILE__} collector [options] ..."
  opts.string "-n", "--name", "name of experiment", required: true
  opts.array "-c", "--clients", "list of client as fd00::1,...", required: true
  opts.bool "-v", "--verbose", "enable verbose mode", default: false
  opts.on "-h", "--help" do
    puts opts
    exit
  end

  begin
    parser = Slop::Parser.new(opts)
    options = parser.parse(ARGV).to_hash
  rescue Slop::MissingRequiredOption
    puts opts
    exit
  end

  collector = McastPerfTest::Collector.new(options[:name], options[:clients])
  collector.run

elsif ARGV[0] == "experiment"
  ARGV.shift
  opts = Slop::Options.new
  opts.banner = "usage: #{__FILE__} experiment [options] ..."
  opts.string "-e", "--ethernet", "ethernet interface", required: true
  opts.string "-w", "--wifi", "ethernet interface", required: true
  opts.string "-n", "--name", "name of experiment", required: true
  opts.array "-c", "--clients", "list of client as fd00::1,...", required: true
  opts.array "-b", "--bitrates",
    "bitrates for experiment in kbps as (start,stop,step)", required: true
  opts.array "-p", "--packets",
    "packet lenghts for experiment in bytes as (start,stop,step)",
    required: true
  opts.int "-t", "--time", "sending test time (default: 60)", default: 60
  opts.bool "-v", "--verbose", "enable verbose mode", default: false
  opts.on "-h", "--help" do
    puts opts
    exit
  end

  begin
    parser = Slop::Parser.new(opts)
    options = parser.parse(ARGV).to_hash
  rescue Slop::MissingRequiredOption
    puts opts
    exit
  end

  start,stop,step = options[:bitrates].map!{|b| b.to_i * 1024}
  options[:bitrates] = (start..stop).step(step).to_a
  start,stop,step = options[:packets].map!{|p| p.to_i}
  options[:packets] = (start..stop).step(step).to_a

  McastPerfTest.experiment(options)
else
  puts send_parser
  puts recv_parser
  puts experiment_parser
end

