#!/usr/bin/env ruby

require "bundler/setup"
require "mcast_perf_test"
require 'optparse'

options = {
  ethernet: nil,
  wifi: nil,
  samples: 200_000,
  pkg_length: nil,
  bitrate: nil,
  loop: false,
  clients: nil,
  bit_range: nil,
  pkg_range: nil,
  name: nil
}

recv_parser = OptionParser.new do|opts|
  opts.banner = "Usage: #{__FILE__} receiver [options]"

  opts.on('-e', '--ethernet interface', 'Ethernet interface') do |ethernet|
    options[:ethernet] = ethernet;
  end
  opts.on('-w', '--wifi interface', 'WiFi interface') do |wifi|
    options[:wifi] = wifi;
  end
  opts.on('-s', '--samples number', 'Number of samples') do |samples|
    options[:samples] = samples.to_i;
  end

  opts.on('-h', '--help', 'Displays Help') do
    puts opts
    exit
  end

end

experiment_parser = OptionParser.new do|opts|
  opts.banner = "Usage: #{__FILE__} experiment [options]"

  opts.on('-e', '--ethernet interface', 'Ethernet interface') do |ethernet|
    options[:ethernet] = ethernet
  end
  opts.on('-w', '--wifi interface', 'WiFi interface') do |wifi|
    options[:wifi] = wifi
  end
  opts.on('-n', '--name name', 'Experiment name') do |name|
    options[:name] = name
  end
  opts.on('-c', '--clients fd00::1,..', 'IPv6 address of clients') do |clients|
    options[:clients] = clients.split(",")
  end
  opts.on('-b', '--bitrates start,stop,step',
          'Bitrates for experiment (kilobit pr second)') do |bitrates|
    start, stop, step = bitrates.split(",").map{|e| e.to_i * 1024}
    options[:bit_range] = (start..stop).step(step).to_a
  end
  opts.on('-p', '--packages start,stop,step',
          'Packet lengths for experiment (bytes)') do |lengths|
    start, stop, step = lengths.split(",").map(&:to_i)
    options[:pkg_range] = (start..stop).step(step).to_a
  end

  opts.on('-h', '--help', 'Displays Help') do
    puts opts
    exit
  end

end

collector_parser = OptionParser.new do|opts|
  opts.banner = "Usage: #{__FILE__} collector [options]"

  opts.on('-n', '--name name', 'Experiment name') do |name|
    options[:name] = name
  end
  opts.on('-c', '--clients fd00::1,..', 'IPv6 address of clients') do |clients|
    options[:clients] = clients.split(",")
  end

  opts.on('-h', '--help', 'Displays Help') do
    puts opts
    exit
  end

end

send_parser = OptionParser.new do|opts|
  opts.banner = "Usage: #{__FILE__} sender [options]"

  opts.on('-p', '--packet length', 'Packet Length (bytes)') do |pkg_len|
    options[:pkg_length] = pkg_len.to_i
  end

  opts.on('-b', '--bitrate rate', 'Bitrate (kilobit per second)') do |bitrate|
    options[:bitrate] = bitrate.to_f * 1024;
  end

  opts.on('-e', '--ethernet interface', 'Ethernet interface') do |ethernet|
    options[:ethernet] = ethernet;
  end
  opts.on('-w', '--wifi interface', 'WiFi interface') do |wifi|
    options[:wifi] = wifi;
  end

  opts.on('-h', '--help', 'Displays Help') do
    puts opts
    exit
  end

end

if ARGV[0] == "sender"
  ARGV.shift
  if ARGV.length < 4
    puts send_parser
    exit 1
  end
  send_parser.parse!
  send = McastPerfTest::Sender.new(options)
  send.run
elsif ARGV[0] == "receiver"
  ARGV.shift
  if ARGV.length < 2
    puts recv_parser
    exit 1
  end
  recv_parser.parse!
  recv = McastPerfTest::Receiver.new(options)
  recv.run
elsif ARGV[0] == "collector"
  ARGV.shift
  if ARGV.length < 2
    puts collector_parser
    exit 1
  end
  collector_parser.parse!
  collector = McastPerfTest::Collector.new(options[:name], options[:clients])
  collector.run
elsif ARGV[0] == "experiment"
  ARGV.shift
  if ARGV.length < 6
    puts experiment_parser
    exit 1
  end
  experiment_parser.parse!
  McastPerfTest.experiment(options[:name],
                           options[:clients],
                           options[:bit_range],
                           options[:pkg_range],
                           options[:wifi],
                           options[:ethernet])
else
  puts send_parser
  puts recv_parser
  puts experiment_parser
end

